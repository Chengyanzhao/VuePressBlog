(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{323:function(t,e,s){"use strict";s.r(e);var a=s(1),n=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"xmlhttprequest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest","aria-hidden":"true"}},[t._v("#")]),t._v(" XMLHttpRequest")]),t._v(" "),s("p",[t._v("在现代浏览器中都内置了"),s("code",[t._v("XMLHttpRequest")]),t._v("对象，用于进行ajax交互。"),s("br"),t._v("\n大家使用的jQuery.ajax、axios等库都是对"),s("code",[t._v("XMLHttpRequest")]),t._v("的包装，这样使用起来更方便。"),s("br"),t._v("\n但是需要注意，Fetch并不是对"),s("code",[t._v("XMLHttpRequest")]),t._v("的封装，而是与它平级，都是WebAPI。")]),t._v(" "),s("h2",{attrs:{id:"设置响应数据类型-responsetype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置响应数据类型-responsetype","aria-hidden":"true"}},[t._v("#")]),t._v(" 设置响应数据类型:responseType")]),t._v(" "),s("p",[t._v("在实现前端使用POST请求下载文件时，需要取到Blob类型的结果，由此好奇如axios等上层类库是如何将响应结果包装为Blob的。")]),t._v(" "),s("p",[t._v("在axios中发现是这样设置的：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// axios: /lib/adapters.js")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// line: 133")]),t._v("\nrequest"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseType "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" config"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseType"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("由此可见，响应数据的类型并不是由axios这种上层应用库去设置，而是在XMLHttpRequest层面对实例的responseType属性设置。")])])}],!1,null,null,null);e.default=n.exports}}]);